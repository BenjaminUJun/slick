Question: When I run "sudo python shim.py" command in shim/ folder. 
          I get this error: "socket.gaierror: [Errno -2] Name or service not known"
          
Answer: Please make sure that the /etc/hostname file contains just the name of the machine.
        For example if your machine name is "mininet-vm", the file should contain the exact name.

        That /etc/hosts has an entry for localhost and machine name:
        127.0.0.1    localhost
        127.0.1.1    mininet-vm



Question: I am getting the error when I start the controller: "AuthenticationException: Authentication failed."

Answer: Please make sure that the file middlesox/pox/ext/slick/conf.py
        has the correct username and password in the file.
        MB_USERNAME
        MB_PASSWORD



Question: How do I know which interface of mininet is connected with the internet, so that
          I can provide it as root-interface to the mininet script?

Answer: Please use -I option of ping.
        ping -I eth0 www.google.com

        If you are getting a reply back it means eth0 is your interface that is connected to Internet.



Question: When I start slick controller, I get this error immediately.
          "error: [Errno 99] Cannot assign requested address"

Answer: Please make sure that you are specifying a valid IP address for
        ethernet interface on machine for pox controller option of
        --tcp_address



Question: When I start pox controller from the instructions I get this error:
          "ImportError: No module named Crypto.PublicKey"

Answer: This error is caused by failure in paramiko installation. You can try
        giving this command:
        $ sudo easy_install paramiko
        to install it on your machine or run the install-slick.sh script again.



APPLICATIONS
------------

    You can now specify an application to run as a commandline option to pox.
    It goes after "slick_controller" and before "messenger".  For example, to
    run an application the tests out triggers:

		$ cd middlesox/pox/pox/
		$ sudo ./pox.py --verbose host_tracker slick.slick_controller --application=TriggerAllUnitTest --query=details messenger slick.tcp_transport --tcp_address=192.168.56.101 --tcp_port=7790 samples.spanning_tree --forwarding=l2_multi_slick

    If no application is specified on the commandline, it will default to
    running the TwoLoggers application (which logs both port 53 and port 80
    traffic).

    As you develop new applications, please do the following:

        - Place them in ~/middlesox/pox/ext/slick/apps/
        - Name the file the same as the class (it is case sensitive for now)
        - Add the name of the app to ~/middlesox/pox/ext/slick/apps/__init__.py
        - Reflect the case sensitive naming in your applications .spec file

    Applications can be found in:
        ~/middlesox/pox/ext/slick/apps/

    Elements can be found in
        ~/middlesox/pox/ext/slick/elements/

PLACEMENT ALGORITHMS:
--------------------
    You can now specify a placement algorithm to run as a commandline option to pox.
    It goes after "slick_controller". To specify the placement algorithm
    you can use the command line option of --placement. By default the Random Placement
    algorithm is started but other algorithms can also be specified. Currently there
    are four placement algorithms that are implemented.
    a- Random Placement
    b- RoundRobin Placement
    c- IncrementalK Placement
    d- Network Aware Placement 
    	
     To start the controller for a specific placement algorithm please use this command.
	$ cd middlesox/pox/pox/
	$ sudo ./pox.py --verbose host_tracker slick.slick_controller --application=TwoLoggers --placement=RoundRobin --query=details messenger slick.tcp_transport --tcp_address=192.168.56.101 --tcp_port=7790 samples.spanning_tree --forwarding=l2_multi_slick


     You can write your own placement algorithm using the placement interface. To write an algorithm please check existing
     placement algorithms in directory slick/placement and use the interface provided in abstract class slick/placement/Placement.py.
        - Test and place your placement algorithm file in slick/placement/
        - Modify the slick_controller.py file to invoke your placement algorithm.
        - Run the new placement algorithm using the --placement command line option of pox controller. 

STEERING ALGORITHMS:
--------------------
    You can now specify a steering algorithm to run as a commandline option to pox.
    It goes after "slick_controller". To specify the steering algorithm
    you can use the command line option of --steering. By default the LoadAwareShortestPath steering
    algorithm is started but other algorithms can also be specified. Currently there
    are four steering algorithms that are implemented.

    a- Random Steering
    b- Breadth First Steering
    c- Depth First Steering
    d- Load Aware Shortest Path Steering/ Load Aware Depth First Steering
    	
     To start the controller for a specific steering algorithm please use this command.
	$ cd middlesox/pox/pox/
	$ sudo ./pox.py --verbose host_tracker slick.slick_controller --application=TwoLoggers --steering=Random --query=details messenger slick.tcp_transport --tcp_address=192.168.56.101 --tcp_port=7790 samples.spanning_tree --forwarding=l2_multi_slick


     You can write your own steering algorithm using the slick steering interface. To write an algorithm please check existing
     steering algorithms in directory slick/steering and use the interface provided in abstract class slick/steering/Steering.py
        - Test and place your steering algorithm file in slick/steering/
        - Modify the slick_controller.py file to invoke your steering algorithm.
        - Run the new steering algorithm using the --steering command line option of pox controller. 

