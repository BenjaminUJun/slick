Compiler:
---------
-> Compiler to read programs and generate application code. There should be option to read the program and generate code, and the option to write custom application.
-> Separate the Slick applications from the controller so that they can be run independently, even on a separate host. 

Function Specs:
---------------
-> Read the function specification conformance on the controller code.

Routing:
---------
-> Code placement algorithm for the initial placement of a middle box function.[On first flow]
-> Design and code algorithm for dynamically adjusting placement of a middle box function based on changes in traffic dynamics. This optimization would prove useful in situations where traffic from more end points are redirected through the middle box function.  For example, at time t0 traffic is between only one pair of end points but at time t1 there are now 10 points at different locations. It may be more beneficial, in terms of latency, to move the middle box function to a location that is central to all 10 points.
-> Modify Route setup function and ensure that it works for networks with more than one switch
-> Test Slick on networks with loops 
-> Test Slick on non-tree networks

Policy Conflicts:
------------------
-> Policy conflicts and overlaps, how can we have these policy issues resolved.


Design/Implementation Suggestion:
-----------------
-> Use Openflow version of shim layer that can be used with the controller and maintain MB MACs at the controller.
-> Inband Middlebox traffic handling.
-> Shim Layer in C/C++.[ For SOSP need C/C++]
-> Use POX controller instead of NOX.   
-> Need the ability to link Function code written in C/C++,Python and other languages.

Policy to Flow Conversion:
---------------------------
1- Currently we use the port numbers to identify the traffic, if its not identifiable by port need DPI.
2- What if we need DPI to understand the traffic, adding a single protocol detection might mean sending all the traffic to the DPI box

Functions to Add:
-----------------
       1- HTTP header rewriting, use the CherryProxy
       2- Use the nDPI library with the C/C++ and with Python CTypes.

Misc.
-----
-> Trust relationship between the middleboxes.
-> Add function code downloading ability?

Future:
---------
Improving the Implementation:
   Using the wireshark decoding protocol.
